{
	"folders":
	[
		{
			"name": "Root",
			"path": ".",
			"folder_exclude_patterns": [
				"_build",
				"_data",
				"core",
				"third_party",
			],
			"file_exclude_patterns": [
				"*.glsl.h",
				"*.glsl.c",
			],
		},
		{
			"name": "PigCore",
			"path": "core",
			"folder_exclude_patterns": [
				"_build",
				"_media",
				"_template",
				"third_party",
				"wasm",
				"tests",
			],
			"file_exclude_patterns": [
				".gitignore",
				"*.sublime-project",
				"*.sublime-workspace",
				"NOTES.todo",
				"LICENSE.txt",
				"README.md",
				"*.rdbg",
				"build.bat",
				"build.sh",
				"build_config.h",
			],
		},
		{
			"name": "Stb",
			"path": "core/third_party/stb",
			"file_include_patterns": [
				"stb_image.h",
				"stb_image_write.h",
				"stb_rect_pack.h",
				"stb_sprintf.h",
				"stb_truetype.h",
				"stb_vorbis.h",
			],
		},
		{
			"name": "raylib",
			"path": "core/third_party/raylib",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "Box2D",
			"path": "core/third_party/box2d",
			"file_exclude_patterns": [
				"LICENSE",
			],
		},
		{
			"name": "Sokol",
			"path": "core/third_party/sokol",
			"folder_exclude_patterns": [
				".github",
				"tests",
			],
			"file_exclude_patterns": [
				".gitignore",
				".editorconfig",
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "HandmadeMath",
			"path": "core/third_party/handmade_math",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "meow_hash",
			"path": "core/third_party/meow_hash",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "cgltf",
			"path": "core/third_party/cgltf",
			"folder_exclude_patterns": [
				".github",
				"fuzz",
				"test",
			],
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "Clay",
			"path": "core/third_party/clay",
			"folder_exclude_patterns": [
				".github",
				"bindings",
				"cmake",
			],
			"file_exclude_patterns": [
				".dockerignore",
				".gitignore",
				"CMakeLists.txt",
				"LICENSE.md",
				"README.md",
			],
		},
		{
			"name": "cimgui",
			"path": "core/third_party/cimgui",
		},
		{
			"name": "Dear ImGui",
			"path": "core/third_party/imgui",
		},
	],
	"settings":
	{
		"build_options":
		[
		],
		"custom_constants":
		[
			"BACKGROUND_BLACK",
			"BACKGROUND_DARK_GRAY",
			"BACKGROUND_GRAY",
			"BUILDING_AS_DLL",
			"BUILD_GAME_DLL",
			"BUILD_GAME_EXE",
			"BUILD_INTO_SINGLE_UNIT",
			"BUILD_PIGGEN_IF_NEEDED",
			"BUILD_PIG_CORE_LIB",
			"BUILD_PIG_CORE_LIB_IF_NEEDED",
			"CHECK_FILE_WRITE_TIME_PERIOD",
			"COPY_TO_DATA_DIRECTORY",
			"ERROR_RED",
			"FILE_PATH_DISPLAY_MAX_LENGTH",
			"FileOptionType_Bool",
			"FileOptionType_Count",
			"FileOptionType_I32",
			"FileOptionType_None",
			"FileOptionType_R32",
			"FileOptionType_Str",
			"HOVERED_BLUE",
			"LINE_BREAK_EXTRA_UI_GAP",
			"MAIN_FONT_NAME",
			"MAIN_FONT_SIZE",
			"MAIN_FONT_STYLE",
			"MAX_LINE_BREAKS_CONSIDERED",
			"NUM_FRAMES_BEFORE_SLEEP",
			"OPTION_UI_GAP",
			"OUTLINE_GRAY",
			"PIG_CORE_BUILDING_AS_DLL",
			"PIG_CORE_IMPLEMENTATION",
			"PIG_CORE_INLINE",
			"Result_Canceled",
			"SELECTED_BLUE",
			"TEXT_GRAY",
			"TEXT_LIGHT_GRAY",
			"TEXT_WHITE",
			"TOPBAR_HEIGHT",
			"WINDOW_DROPDOWN_WIDTH",
		],
		"custom_functions":
		[
			"#define InitVarArray(type, arrayPntr, arena)",
			"#define InitVarArrayWithInitial(type, arrayPntr, arena, initialCountNeeded)",
			"#define VarArrayAddMulti(type, arrayPntr, numItems)",
			"Result OsDoOpenFileDialog(Arena* arena, Str8* pathOut)",
			"Result OsGetFileWriteTime(FilePath filePath, OsFileWriteTime* timeOut)",
			"Result OsLoadDll(FilePath path, OsDll* dllOut)",
			"Result TryParseImageFile(Slice fileContents, Arena* arena, ImageData* imageDataOut)",
			"Str8 GetNamelessProgramArg(const ProgramArgs* args, uxx argIndex)",
			"Str8 StrSlice(Str8 target, uxx startIndex, uxx endIndex)",
			"Str8 StrSliceFrom(Str8 target, uxx startIndex)",
			"Str8 StrSliceLength(Str8 target, uxx startIndex, uxx length)",
			"Str8 StrSliceMaxLength(Str8 target, uxx startIndex, uxx maxLength)",
			"Str8 TrimWhitespace(Str8 target)",
			"Str8 TrimWhitespaceAndNewLines(Str8 target)",
			"bool ClayBtn(const char* btnText, bool isEnabled)",
			"bool ClayBtnStr(Str8 btnText, bool isEnabled)",
			"bool ClayOptionBtn(Str8 nameStr, Str8 valueStr, bool enabled)",
			"bool ClayTopBtn(const char* btnText, bool* isOpenPntr, r32 dropDownWidth)",
			"bool FindNamedProgramArgBool(const ProgramArgs* args, Str8 name, bool defaultValue)",
			"bool FindNamedProgramArgBoolEx(const ProgramArgs* args, Str8 name, Str8 otherName, bool defaultValue, uxx skipCount)",
			"bool IsMouseOverClay(Clay_ElementId clayId)",
			"bool StrExactEndsWith(Str8 target, Str8 suffix)",
			"bool StrExactEquals(Str8 left, Str8 right)",
			"bool StrExactEqualsAt(Str8 left, Str8 right, uxx leftIndex)",
			"bool StrExactStartsWith(Str8 target, Str8 prefix)",
			"const char* GetFileOptionTypeStr(FileOptionType enumValue)",
			"void AppCloseFile()",
			"void AppOpenFile()",
			"void BeginClayUIRender(ClayUI* clay, v2 windowSize, r32 elapsedMs, bool isMouseOverOther, v2 mousePos, bool isMouseDown, v2 mouseScrollDelta)",
			"void FreeProgramArgs(ProgramArgs* args)",
			"void ParseProgramArgStr(Arena* arena, Str8 rawString, ProgramArg* argOut)",
			"void ParseProgramArgs(Arena* arena, uxx numArguments, const char** arguments, ProgramArgs* argsOut)",
			"void SetOptionValue(FileOption* option, Str8 newValueStr)",
			"void UpdateOptionValueInFile(FileOption* option)",
		],
		"custom_globals":
		[
		],
		"custom_types":
		[
			"FileOption",
			"FileOptionType",
			"OsDll",
			"OsFileWriteTime",
			"ProgramArg",
			"ProgramArgs",
			"SetWindowTopmost_f",
		],
	},
}
