{
	"folders":
	[
		{
			"name": "Root",
			"path": ".",
			"folder_exclude_patterns": [
				"_build",
				"_data",
				"core",
				"third_party",
			],
			"file_exclude_patterns": [
				"*.glsl.h",
				"*.glsl.c",
			],
		},
		{
			"name": "PigCore",
			"path": "core",
			"folder_exclude_patterns": [
				"_build",
				"_media",
				"_template",
				"third_party",
				"wasm",
				"tests",
			],
			"file_exclude_patterns": [
				".gitignore",
				"*.sublime-project",
				"*.sublime-workspace",
				"NOTES.todo",
				"LICENSE.txt",
				"README.md",
				"*.rdbg",
				"build.bat",
				"build.sh",
				"build_config.h",
			],
		},
		{
			"name": "Stb",
			"path": "core/third_party/stb",
			"file_include_patterns": [
				"stb_image.h",
				"stb_image_write.h",
				"stb_rect_pack.h",
				"stb_sprintf.h",
				"stb_truetype.h",
				"stb_vorbis.h",
			],
		},
		{
			"name": "raylib",
			"path": "core/third_party/raylib",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "Box2D",
			"path": "core/third_party/box2d",
			"file_exclude_patterns": [
				"LICENSE",
			],
		},
		{
			"name": "Sokol",
			"path": "core/third_party/sokol",
			"folder_exclude_patterns": [
				".github",
				"tests",
			],
			"file_exclude_patterns": [
				".gitignore",
				".editorconfig",
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "HandmadeMath",
			"path": "core/third_party/handmade_math",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "meow_hash",
			"path": "core/third_party/meow_hash",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "cgltf",
			"path": "core/third_party/cgltf",
			"folder_exclude_patterns": [
				".github",
				"fuzz",
				"test",
			],
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "Clay",
			"path": "core/third_party/clay",
			"folder_exclude_patterns": [
				".github",
				"bindings",
				"cmake",
			],
			"file_exclude_patterns": [
				".dockerignore",
				".gitignore",
				"CMakeLists.txt",
				"LICENSE.md",
				"README.md",
			],
		},
		{
			"name": "cimgui",
			"path": "core/third_party/cimgui",
		},
		{
			"name": "Dear ImGui",
			"path": "core/third_party/imgui",
		},
	],
	"settings":
	{
		"build_options":
		[
		],
		"custom_constants":
		[
			"BACKGROUND_BLACK",
			"BACKGROUND_DARK_GRAY",
			"BACKGROUND_GRAY",
			"BUILDING_AS_DLL",
			"BUILD_GAME_DLL",
			"BUILD_GAME_EXE",
			"BUILD_INTO_SINGLE_UNIT",
			"BUILD_PIGGEN_IF_NEEDED",
			"BUILD_PIG_CORE_LIB",
			"BUILD_PIG_CORE_LIB_IF_NEEDED",
			"BUNDLE_RESOURCES_ZIP",
			"BUNDLE_RESOURCES_ZIP_IF_NEEDED",
			"CHECK_RECENT_FILES_WRITE_TIME_PERIOD",
			"COPY_TO_DATA_DIRECTORY",
			"ERROR_RED",
			"FILE_PATH_DISPLAY_MAX_LENGTH",
			"FILE_RELOAD_DELAY",
			"FileOptionType_Bool",
			"FileOptionType_Count",
			"FileOptionType_I32",
			"FileOptionType_None",
			"FileOptionType_R32",
			"FileOptionType_Str",
			"HOVERED_BLUE",
			"LINE_BREAK_EXTRA_UI_GAP",
			"MAIN_FONT_NAME",
			"MAIN_FONT_SIZE",
			"MAIN_FONT_STYLE",
			"MAX_LINE_BREAKS_CONSIDERED",
			"NUM_FRAMES_BEFORE_SLEEP",
			"OPEN_RECENT_DROPDOWN_WIDTH",
			"OPTION_UI_GAP",
			"OUTLINE_GRAY",
			"PIG_CORE_BUILDING_AS_DLL",
			"PIG_CORE_IMPLEMENTATION",
			"PIG_CORE_INLINE",
			"RECENT_FILES_MAX_LENGTH",
			"RECENT_FILES_RELOAD_DELAY",
			"RECENT_FILES_SAVE_FILEPATH",
			"Result_Canceled",
			"Result_WrongFolder",
			"SELECTED_BLUE",
			"TEXT_GRAY",
			"TEXT_LIGHT_GRAY",
			"TEXT_WHITE",
			"TOPBAR_HEIGHT",
			"USE_BUNDLED_RESOURCES",
			"WINDOW_DROPDOWN_WIDTH",
		],
		"custom_functions":
		[
			"#define ArrayCount(Array)",
			"#define FlagEnumSet(BitwiseField, Bit, enumType, castType)",
			"#define FlagEnumSetTo(BitwiseField, Bit, condition, enumType, castType)",
			"#define FlagEnumToggle(BitwiseField, Bit, enumType, castType)",
			"#define FlagEnumUnset(BitwiseField, Bit, enumType, castType)",
			"#define FlagSet(BitwiseField, Bit)",
			"#define FlagSetTo(BitwiseField, Bit, condition)",
			"#define FlagToggle(BitwiseField, Bit)",
			"#define FlagUnset(BitwiseField, Bit)",
			"#define Gigabytes(value)",
			"#define InitVarArray(type, arrayPntr, arena)",
			"#define InitVarArrayWithInitial(type, arrayPntr, arena, initialCountNeeded)",
			"#define IsEqualXor(variable1, variable2, condition1, condition2)",
			"#define IsFlagSet(BitwiseField, Bit)",
			"#define IsPntrWithin(regionStart, regionSize, pntr)",
			"#define IsSizedPntrWithin(regionStart, regionSize, pntr, size)",
			"#define IsVersionAbove(versionMajor, versionMinor, numberMajor, numberMinor)",
			"#define IsVersionBelow(versionMajor, versionMinor, numberMajor, numberMinor)",
			"#define Kilobytes(value)",
			"#define Megabytes(value)",
			"#define Plural(number, multipleSuffix)",
			"#define PluralEx(number, singularSuffix, multipleSuffix)",
			"#define STRINGIFY(text)",
			"#define STRINGIFY_DEFINE(define)",
			"#define SetOptionalOutPntr(outputPntr, value)",
			"#define Terabytes(value)",
			"#define ToDegrees32(radians)",
			"#define ToDegrees64(radians)",
			"#define ToRadians32(degrees)",
			"#define ToRadians64(degrees)",
			"#define TrackMax(isFirst, trackVariable, newValue)",
			"#define TrackMin(isFirst, trackVariable, newValue)",
			"#define VarArrayAddMulti(type, arrayPntr, numItems)",
			"FilePath AllocFilePath(Arena* arena, Str8 pathStr, bool addNullTerm)",
			"FilePath AllocFolderPath(Arena* arena, Str8 pathStr, bool addNullTerm)",
			"FilePath GetFileFolderPart(FilePath path)",
			"FilePath OsGetSettingsSavePath(Arena* arena, Str8 companyName, Str8 programName, bool createFolders)",
			"Result OsCreateFolder(FilePath path, bool createParentFoldersIfNeeded)",
			"Result OsLoadDll(FilePath path, OsDll* dllOut)",
			"Result TryParseImageFile(Slice fileContents, Arena* arena, ImageData* imageDataOut)",
			"Result TryReadAppResource(AppResources* resources, Arena* arena, FilePath path, bool convertNewLines, Slice* fileContentsOut)",
			"Slice ReadAppResource(AppResources* resources, Arena* arena, FilePath path, bool convertNewLines)",
			"Str8 AllocStrAndCopy(Arena* arena, uxx numChars, const char* charsToCopy, bool addNullTerm)",
			"Str8 AllocStrAndCopyNt(Arena* arena, const char* nullTermStr, bool addNullTerm)",
			"Str8 CollapsePathParts(FilePath path)",
			"Str8 GetFileExtPart(FilePath path, bool includeSubExtensions, bool includeLeadingPeriod)",
			"Str8 GetFileNamePart(FilePath path, bool includeExtension)",
			"Str8 GetNamelessProgramArg(const ProgramArgs* args, uxx argIndex)",
			"Str8 GetPathPart(FilePath path, ixx partIndex, bool includeEmptyBeginOrEnd)",
			"Str8 JoinStringsInArena(Arena* arena, Str8 left, Str8 right, bool addNullTerm)",
			"Str8 JoinStringsInArenaWithChar(Arena* arena, Str8 left, char sepChar, Str8 right, bool addNullTerm)",
			"Str8 PrintInArenaStr(Arena* arena, const char* formatString, ...)",
			"Str8 StrReplace(Arena* arena, Str8 str, Str8 target, Str8 replacement, bool addNullTerm)",
			"Str8 StrSlice(Str8 target, uxx startIndex, uxx endIndex)",
			"Str8 StrSliceFrom(Str8 target, uxx startIndex)",
			"Str8 StrSliceLength(Str8 target, uxx startIndex, uxx length)",
			"Str8 StrSliceMaxLength(Str8 target, uxx startIndex, uxx maxLength)",
			"Str8 TrimWhitespace(Str8 target)",
			"Str8 TrimWhitespaceAndNewLines(Str8 target)",
			"bool AppCheckForFileChanges()",
			"bool ClayBtn(const char* btnText, bool isEnabled)",
			"bool ClayBtnStr(Str8 btnText, bool isEnabled)",
			"bool ClayBtnStrEx(Str8 idStr, Str8 btnText, bool isEnabled)",
			"bool ClayOptionBtn(Str8 nameStr, Str8 valueStr, bool enabled)",
			"bool ClayTopBtn(const char* btnText, bool* isOpenPntr, bool keepOpen, r32 dropDownWidth)",
			"bool ClayTopSubmenu(const char* btnText, bool isParentOpen, bool* isOpenPntr, r32 dropDownWidth)",
			"bool DoesPathHaveExt(FilePath path)",
			"bool DoesPathHaveTrailingSlash(FilePath path)",
			"bool FindNamedProgramArgBool(const ProgramArgs* args, Str8 name, bool defaultValue)",
			"bool FindNamedProgramArgBoolEx(const ProgramArgs* args, Str8 name, Str8 otherName, bool defaultValue, uxx skipCount)",
			"bool HandleSokolKeyboardAndMouseEvents(const sapp_event* event, u64 currentTime, v2i screenSize, KeyboardState* keyboard, MouseState* mouse, bool isMouseLocked)",
			"bool HasFileWatchChanged(const VarArray* watches, uxx watchId)",
			"bool HasFileWatchChangedWithDelay(const VarArray* watches, uxx watchId, u64 delayMs)",
			"bool IsMouseOverClay(Clay_ElementId clayId)",
			"bool OsDoesFileOrFolderExist(FilePath path, bool* isFolderOut)",
			"bool OsDoesPathExist(FilePath path)",
			"bool StrExactEndsWith(Str8 target, Str8 suffix)",
			"bool StrExactEquals(Str8 left, Str8 right)",
			"bool StrExactEqualsAt(Str8 left, Str8 right, uxx leftIndex)",
			"bool StrExactStartsWith(Str8 target, Str8 prefix)",
			"char* AllocAndCopyChars(Arena* arena, uxx numChars, const char* charsToCopy, bool addNullTerm)",
			"char* AllocAndCopyCharsNt(Arena* arena, const char* nullTermStr, bool addNullTerm)",
			"char* PrintInArena(Arena* arena, const char* formatString, ...)",
			"const char* GetFileOptionTypeStr(FileOptionType enumValue)",
			"int PrintVa_Measure(const char* formatString, va_list args)",
			"uxx AddFileWatch(VarArray* watches, FilePath path, uxx checkPeriod)",
			"uxx ChangePathSlashesTo(FilePath path, char slashType)",
			"uxx CountPathParts(FilePath path, bool includeEmptyBeginOrEnd)",
			"uxx FixPathSlashes(FilePath path)",
			"void AppClearRecentFiles()",
			"void AppCloseFile()",
			"void AppLoadRecentFilesList()",
			"void AppOpenFile(FilePath filePath)",
			"void AppRememberRecentFile(FilePath filePath)",
			"void AppSaveRecentFilesList()",
			"void BeginClayUIRender(ClayUI* clay, v2 windowSize, r32 elapsedMs, bool isMouseOverOther, v2 mousePos, bool isMouseDown, v2 mouseScrollDelta)",
			"void ClearFileWatchChanged(VarArray* watches, uxx watchId)",
			"void FreeFileWatch(Arena* arena, FileWatch* watch)",
			"void FreeProgramArgs(ProgramArgs* args)",
			"void FreeStr8(Arena* arena, Str8* stringPntr)",
			"void FreeStr8WithNt(Arena* arena, Str8* stringPntr)",
			"void InitAppInput(AppInput* input)",
			"void InitAppResources(AppResources* resources)",
			"void InitFileWatches(VarArray* watches)",
			"void ParseProgramArgStr(Arena* arena, Str8 rawString, ProgramArg* argOut)",
			"void ParseProgramArgs(Arena* arena, uxx numArguments, const char** arguments, ProgramArgs* argsOut)",
			"void PrintVa_Print(const char* formatString, va_list args, char* allocatedSpace, int previousResult)",
			"void RemoveFileWatch(VarArray* watches, uxx watchId)",
			"void SetOptionValue(FileOption* option, Str8 newValueStr)",
			"void TwoPassPrint(char* resultPntr, u64 resultLength, u64* currentByteIndex, const char* formatString, ...)",
			"void UpdateOptionValueInFile(FileOption* option)",
		],
		"custom_globals":
		[
		],
		"custom_types":
		[
			"AppResources",
			"FileOption",
			"FileOptionType",
			"FileWatch",
			"OsDll",
			"ProgramArg",
			"ProgramArgs",
			"RecentFile",
			"SetWindowTopmost_f",
		],
	},
}
