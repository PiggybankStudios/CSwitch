{
	"folders":
	[
		{
			"name": "Root",
			"path": ".",
			"folder_exclude_patterns": [
				"_build",
				"_data",
				"core",
				"third_party",
			],
			"file_exclude_patterns": [
				"*.glsl.h",
				"*.glsl.c",
			],
		},
		{
			"name": "PigCore",
			"path": "core",
			"folder_exclude_patterns": [
				"_build",
				"_media",
				"_template",
				"third_party",
				"wasm",
				"tests",
			],
			"file_exclude_patterns": [
				".gitignore",
				"*.sublime-project",
				"*.sublime-workspace",
				"NOTES.todo",
				"LICENSE.txt",
				"README.md",
				"*.rdbg",
				"build.bat",
				"build.sh",
				"build_config.h",
			],
		},
		{
			"name": "Stb",
			"path": "core/third_party/stb",
			"file_include_patterns": [
				"stb_image.h",
				"stb_image_write.h",
				"stb_rect_pack.h",
				"stb_sprintf.h",
				"stb_truetype.h",
				"stb_vorbis.h",
			],
		},
		{
			"name": "raylib",
			"path": "core/third_party/raylib",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "Box2D",
			"path": "core/third_party/box2d",
			"file_exclude_patterns": [
				"LICENSE",
			],
		},
		{
			"name": "Sokol",
			"path": "core/third_party/sokol",
			"folder_exclude_patterns": [
				".github",
				"tests",
			],
			"file_exclude_patterns": [
				".gitignore",
				".editorconfig",
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "HandmadeMath",
			"path": "core/third_party/handmade_math",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "meow_hash",
			"path": "core/third_party/meow_hash",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "cgltf",
			"path": "core/third_party/cgltf",
			"folder_exclude_patterns": [
				".github",
				"fuzz",
				"test",
			],
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "Clay",
			"path": "core/third_party/clay",
			"folder_exclude_patterns": [
				".github",
				"bindings",
				"cmake",
			],
			"file_exclude_patterns": [
				".dockerignore",
				".gitignore",
				"CMakeLists.txt",
				"LICENSE.md",
				"README.md",
			],
		},
		{
			"name": "cimgui",
			"path": "core/third_party/cimgui",
		},
		{
			"name": "Dear ImGui",
			"path": "core/third_party/imgui",
		},
	],
	"settings":
	{
		"build_options":
		[
		],
		"custom_constants":
		[
			"AppIcon_ClipLeft",
			"AppIcon_ClipRight",
			"AppIcon_CloseFile",
			"AppIcon_CloseWindow",
			"AppIcon_Count",
			"AppIcon_Debug",
			"AppIcon_None",
			"AppIcon_OpenFile",
			"AppIcon_OpenRecent",
			"AppIcon_SmoothScroll",
			"AppIcon_Tooltip",
			"AppIcon_TopmostDisabled",
			"AppIcon_TopmostEnabled",
			"AppIcon_Trash",
			"BACKGROUND_BLACK",
			"BACKGROUND_DARK_GRAY",
			"BACKGROUND_GRAY",
			"BUILDING_AS_DLL",
			"BUILD_GAME_DLL",
			"BUILD_GAME_EXE",
			"BUILD_INTO_SINGLE_UNIT",
			"BUILD_PIGGEN_IF_NEEDED",
			"BUILD_PIG_CORE_LIB",
			"BUILD_PIG_CORE_LIB_IF_NEEDED",
			"BUNDLE_RESOURCES_ZIP",
			"BUNDLE_RESOURCES_ZIP_IF_NEEDED",
			"COPY_TO_DATA_DIRECTORY",
			"ERROR_RED",
			"FileOptionType_Bool",
			"FileOptionType_Count",
			"FileOptionType_I32",
			"FileOptionType_None",
			"FileOptionType_R32",
			"FileOptionType_Str",
			"HOVERED_BLUE",
			"LINE_BREAK_EXTRA_UI_GAP",
			"MAIN_FONT_NAME",
			"MAIN_FONT_SIZE",
			"MAIN_FONT_STYLE",
			"MAX_LINE_BREAKS_CONSIDERED",
			"MIN_WINDOW_SIZE",
			"NUM_FRAMES_BEFORE_SLEEP",
			"OPTIONS_SMOOTH_SCROLLING_DIVISOR",
			"OPTION_NAME_TOOLTIP_DELAY",
			"OPTION_UI_GAP",
			"OUTLINE_GRAY",
			"PIG_CORE_BUILDING_AS_DLL",
			"PIG_CORE_IMPLEMENTATION",
			"PIG_CORE_INLINE",
			"PREFER_OPENGL_OVER_D3D11",
			"Result_Canceled",
			"Result_WrongFolder",
			"SELECTED_BLUE",
			"TEXT_GRAY",
			"TEXT_LIGHT_GRAY",
			"TEXT_WHITE",
			"TOOLTIP_MAX_MOVE_DIST",
			"TOOLTIP_MOUSE_DOWN_OFFSET",
			"TOOLTIP_MOUSE_UP_OFFSET",
			"TOOLTIP_TEXT_MARGIN",
			"TOPBAR_HEIGHT",
			"TOPBAR_ICONS_PADDING",
			"TOPBAR_ICONS_SIZE",
			"TextContraction_ClipLeft",
			"TextContraction_ClipRight",
			"TextContraction_Count",
			"TextContraction_EllipseFilePath",
			"TextContraction_EllipseLeft",
			"TextContraction_EllipseMiddle",
			"TextContraction_EllipseRight",
			"UNICODE_ELLIPSIS_CODEPOINT",
			"UNICODE_ELLIPSIS_STR",
			"UNICODE_RIGHT_ARROW_CODEPOINT",
			"UNICODE_RIGHT_ARROW_STR",
			"USE_BUNDLED_RESOURCES",
			"WIN32_TOOLTIP_ID",
		],
		"custom_functions":
		[
			"#define AddClipRec(clipRec)",
			"#define BeginFrame(swapchain, screenSize, clearColor, clearDepth)",
			"#define BindFont(fontPntr)",
			"#define BindFontAtSize(fontPntr, fontSize)",
			"#define BindFontEx(fontPntr, fontSize, fontStyleFlags)",
			"#define BindShader(shaderPntr)",
			"#define BindTexture(texturePntr)",
			"#define BindTextureAtIndex(texturePntr, textureIndex)",
			"#define BindVertBuffer(bufferPntr)",
			"#define CLAY_ICON(texturePntr, size, color)",
			"#define ClearDepthBuffer(clearDepth)",
			"#define DisableClipRec()",
			"#define DrawCircle(circle, color)",
			"#define DrawCirclePiece(circle, angleMin, angleMax, color)",
			"#define DrawObb2(boundingBox, color)",
			"#define DrawRectangle(rectangle, color)",
			"#define DrawRectangleOutline(rectangle, borderThickness, color)",
			"#define DrawRectangleOutlineEx(rectangle, borderThickness, color, outside)",
			"#define DrawRectangleOutlineSides(rectangle, leftThickness, rightThickness, topThickness, bottomThickness, color)",
			"#define DrawRectangleOutlineSidesEx(rectangle, leftThickness, rightThickness, topThickness, bottomThickness, color, outside)",
			"#define DrawRing(circle, thickness, color)",
			"#define DrawRingPiece(circle, thickness, angleMin, angleMax, color)",
			"#define DrawRoundedRectangle(rectangle, radius, color)",
			"#define DrawRoundedRectangleEx(rectangle, radiusTL, radiusTR, radiusBR, radiusBL, color)",
			"#define DrawRoundedRectangleOutline(rectangle, thickness, radius, color)",
			"#define DrawRoundedRectangleOutlineEx(rectangle, thickness, radiusTL, radiusTR, radiusBR, radiusBL, color, outside)",
			"#define DrawText(text, position, color)",
			"#define DrawTextAtSize(fontSize, text, position, color)",
			"#define DrawTextBold(text, position, color)",
			"#define DrawTextItalic(text, position, color)",
			"#define DrawTexturedCircle(circle, color, texture)",
			"#define DrawTexturedCircleEx(circle, color, texture, sourceRec)",
			"#define DrawTexturedCirclePiece(circle, angleMin, angleMax, color, texture)",
			"#define DrawTexturedCirclePieceEx(circle, angleMin, angleMax, color, texture, sourceRec)",
			"#define DrawTexturedObb2(boundingBox, color, texture)",
			"#define DrawTexturedObb2Ex(boundingBox, color, texture, sourceRec)",
			"#define DrawTexturedRectangle(rectangle, color, texture)",
			"#define DrawTexturedRectangleEx(rectangle, color, texture, sourceRec)",
			"#define DrawTexturedRectangleOutline(rectangle, borderThickness, color, texture)",
			"#define DrawTexturedRectangleOutlineEx(rectangle, borderThickness, color, outside, texture, sourceRec)",
			"#define DrawTexturedRectangleOutlineSides(rectangle, leftThickness, rightThickness, topThickness, bottomThickness, color, texture)",
			"#define DrawTexturedRectangleOutlineSidesEx(rectangle, leftThickness, rightThickness, topThickness, bottomThickness, color, outside, texture, sourceRec)",
			"#define DrawTexturedRing(circle, thickness, color, texture)",
			"#define DrawTexturedRingEx(circle, thickness, color, texture, sourceRec)",
			"#define DrawTexturedRingPiece(circle, thickness, angleMin, angleMax, color, texture)",
			"#define DrawTexturedRingPieceEx(circle, thickness, angleMin, angleMax, color, texture, sourceRec)",
			"#define DrawTexturedRoundedRectangle(rectangle, radius, color, texture, sourceRec)",
			"#define DrawTexturedRoundedRectangleEx(rectangle, radiusTL, radiusTR, radiusBR, radiusBL, color, texture, sourceRec)",
			"#define DrawTexturedRoundedRectangleOutline(rectangle, thickness, radius, color, outside, texture, sourceRec)",
			"#define DrawTexturedRoundedRectangleOutlineEx(rectangle, thickness, radiusTL, radiusTR, radiusBR, radiusBL, color, outside, texture, sourceRec)",
			"#define DrawVertices()",
			"#define DrawVerticesEx(startVertexOrIndex, numVerticesOrIndices)",
			"#define EndFrame()",
			"#define FlushBindings()",
			"#define FlushPipelineGen()",
			"#define InitVarArray(type, arrayPntr, arena)",
			"#define InitVarArrayWithInitial(type, arrayPntr, arena, initialCountNeeded)",
			"#define SetClipRec(clipRec)",
			"#define SetColorWriteEnabled(colorWriteEnabled)",
			"#define SetCullingEnabled(cullingEnabled)",
			"#define SetDepth(depth)",
			"#define SetDepthTestEnabled(depthTestEnabled)",
			"#define SetDepthWriteEnabled(depthWriteEnabled)",
			"#define SetProjectionMat(matrix)",
			"#define SetSourceRec(rectangle)",
			"#define SetSourceRecRaw(rectangle)",
			"#define SetTintColor(color)",
			"#define SetTintColorRaw(colorVec)",
			"#define SetVertexOffset(vertexOffset)",
			"#define SetViewMat(matrix)",
			"#define SetWorldMat(matrix)",
			"#define VarArrayAddMulti(type, arrayPntr, numItems)",
			"FilePath ShortenFilePath(Arena* arena, FilePath fullPath, uxx maxNumChars, Str8 ellipsesStr)",
			"FontAtlas* GetFontAtlas(PigFont* font, r32 fontSize, u8 styleFlags)",
			"FontCharRange NewFontCharRangeSingle(u32 codepoint)",
			"Result OsDoOpenFileDialog(Arena* arena, Str8* pathOut)",
			"Result OsLoadDll(FilePath path, OsDll* dllOut)",
			"Result TryParseImageFile(Slice fileContents, Arena* arena, ImageData* imageDataOut)",
			"Result TryReadAppResource(AppResources* resources, Arena* arena, FilePath path, bool convertNewLines, Slice* fileContentsOut)",
			"Slice ReadAppResource(AppResources* resources, Arena* arena, FilePath path, bool convertNewLines)",
			"Str8 FindNamedProgramArgStr(const ProgramArgs* args, Str8 name, Str8 otherName, Str8 defaultValue)",
			"Str8 FindNamedProgramArgStrEx(const ProgramArgs* args, Str8 name, Str8 otherName, Str8 defaultValue, uxx skipCount)",
			"Str8 GetNamelessProgramArg(const ProgramArgs* args, uxx argIndex)",
			"Str8 ShortenFilePathToFitWidth(Arena* arena, const PigFont* font, r32 fontSize, u8 styleFlags, FilePath filePath, r32 maxWidth, Str8 ellipsesStr)",
			"Str8 ShortenTextEndToFitWidth(Arena* arena, const PigFont* font, r32 fontSize, u8 styleFlags, Str8 text, r32 maxWidth, Str8 ellipsesStr)",
			"Str8 ShortenTextStartToFitWidth(Arena* arena, const PigFont* font, r32 fontSize, u8 styleFlags, Str8 text, r32 maxWidth, Str8 ellipsesStr)",
			"Str8 ShortenTextToFitWidth(Arena* arena, const PigFont* font, r32 fontSize, u8 styleFlags, Str8 text, r32 maxWidth, Str8 ellipsesStr, uxx ellipsesIndex)",
			"Str8 ShortenTextToFitWidthEx(Arena* arena, const PigFont* font, r32 fontSize, u8 styleFlags, Str8 text, r32 maxWidth, Str8 ellipsesStr, uxx ellipsesIndex)",
			"Str8 StrSlice(Str8 target, uxx startIndex, uxx endIndex)",
			"Str8 StrSliceFrom(Str8 target, uxx startIndex)",
			"Str8 StrSliceLength(Str8 target, uxx startIndex, uxx length)",
			"Str8 StrSliceMaxLength(Str8 target, uxx startIndex, uxx maxLength)",
			"Str8 TrimWhitespace(Str8 target)",
			"Str8 TrimWhitespaceAndNewLines(Str8 target)",
			"TextMeasure MeasureText(const PigFont* font, Str8 text)",
			"TextMeasure MeasureTextEx(const PigFont* font, r32 fontSize, u8 styleFlags, Str8 text)",
			"TooltipRegion* AddTooltipRegion(VarArray* tooltipRegions, rec mainRec, Str8 displayStr, u64 delay, u64 layer)",
			"TooltipRegion* FindTooltipRegionById(VarArray* tooltipRegions, u64 id)",
			"bool ClayBtn(const char* btnText, bool isEnabled, Texture* icon)",
			"bool ClayBtnStr(Str8 btnText, bool isEnabled, Texture* icon)",
			"bool ClayBtnStrEx(Str8 idStr, Str8 btnText, bool isEnabled, Texture* icon)",
			"bool ClayOptionBtn(Str8 nameStr, Str8 valueStr, bool enabled)",
			"bool ClayTopBtn(const char* btnText, bool* isOpenPntr, bool keepOpen)",
			"bool ClayTopSubmenu(const char* btnText, bool isParentOpen, bool* isOpenPntr, r32 dropDownWidth, Texture* icon)",
			"bool FindNamedProgramArgBool(const ProgramArgs* args, Str8 name, bool defaultValue)",
			"bool FindNamedProgramArgBoolEx(const ProgramArgs* args, Str8 name, Str8 otherName, bool defaultValue, uxx skipCount)",
			"bool IsInsideRec(rec rectangle, v2 position)",
			"bool IsInsideRecInclusive(rec rectangle, v2 position)",
			"bool IsMouseOverClay(Clay_ElementId clayId)",
			"bool StrExactEndsWith(Str8 target, Str8 suffix)",
			"bool StrExactEquals(Str8 left, Str8 right)",
			"bool StrExactEqualsAt(Str8 left, Str8 right, uxx leftIndex)",
			"bool StrExactStartsWith(Str8 target, Str8 prefix)",
			"bool UpdateClayScrolling(ClayUI* clay, r32 elapsedMs, bool isMouseOverOther, v2 mouseScrollDelta, bool allowTouchScrolling)",
			"box InflateBox(box boundingBox, r32 amount)",
			"box InflateBoxEx(box boundingBox, r32 leftAmount, r32 rightAmount, r32 topAmount, r32 bottomAmount, r32 backAmount, r32 frontAmount)",
			"box InflateBoxX(box boundingBox, r32 amount)",
			"box InflateBoxY(box boundingBox, r32 amount)",
			"box InflateBoxZ(box boundingBox, r32 amount)",
			"box OverlapPartBox(box left, box right)",
			"boxi InflateBoxi(boxi boundingBox, i32 amount)",
			"boxi InflateBoxiEx(boxi boundingBox, i32 leftAmount, i32 rightAmount, i32 topAmount, i32 bottomAmount, i32 backAmount, i32 frontAmount)",
			"boxi InflateBoxiX(boxi boundingBox, i32 amount)",
			"boxi InflateBoxiY(boxi boundingBox, i32 amount)",
			"boxi InflateBoxiZ(boxi boundingBox, i32 amount)",
			"boxi OverlapPartBoxi(boxi left, boxi right)",
			"const char* GetAppIconPath(AppIcon enumValue)",
			"const char* GetAppIconStr(AppIcon enumValue)",
			"const char* GetFileOptionTypeStr(FileOptionType enumValue)",
			"const char* GetTextContractionStr(TextContraction enumValue)",
			"rec GetClayElementDrawRec(ClayId elementId)",
			"rec GetClayElementDrawRecNt(const char* elementIdStrNt)",
			"rec GetClayElementDrawRecStr(Str8 elementIdStr)",
			"rec InflateRec(rec rectangle, r32 amount)",
			"rec InflateRecEx(rec rectangle, r32 leftAmount, r32 rightAmount, r32 topAmount, r32 bottomAmount)",
			"rec InflateRecX(rec rectangle, r32 amount)",
			"rec InflateRecY(rec rectangle, r32 amount)",
			"rec OverlapPartRec(rec left, rec right)",
			"reci GfxSystem_AddClipRec(GfxSystem* system, reci clipRec)",
			"reci InflateReci(reci rectangle, i32 amount)",
			"reci InflateReciEx(reci rectangle, i32 leftAmount, i32 rightAmount, i32 topAmount, i32 bottomAmount)",
			"reci InflateReciX(reci rectangle, i32 amount)",
			"reci InflateReciY(reci rectangle, i32 amount)",
			"reci OverlapPartReci(reci left, reci right)",
			"uxx ShortenTextToFitWidthEx(const PigFont* font, r32 fontSize, u8 styleFlags, Str8 text, r32 maxWidth, Str8 ellipsesStr, uxx ellipsesIndex, Str8* beforeEllipseStrOut, Str8* afterEllipseStrOut)",
			"void AppCloseFile()",
			"void AppOpenFile()",
			"void BeginClayUIRender(ClayUI* clay, v2 windowSize, bool isMouseOverOther, v2 mousePos, bool isMouseDown)",
			"void CloseTooltip(TooltipState* tooltip)",
			"void FreeFileOption(FileOption* option)",
			"void FreeProgramArgs(ProgramArgs* args)",
			"void FreeTooltipRegion(TooltipRegion* region)",
			"void InitAppResources(AppResources* resources)",
			"void InitTooltipState(Arena* arena, TooltipState* tooltip)",
			"void ParseProgramArgStr(Arena* arena, Str8 rawString, ProgramArg* argOut)",
			"void ParseProgramArgs(Arena* arena, uxx numArguments, const char** arguments, ProgramArgs* argsOut)",
			"void RemoveTooltipRegionById(VarArray* tooltipRegions, u64 id)",
			"void RenderTooltip(TooltipState* tooltip)",
			"void SetClayContext(ClayUI* clay)",
			"void SetOptionValue(FileOption* option, Str8 newValueStr)",
			"void ShowTooltip(TooltipState* tooltip, TooltipRegion* region)",
			"void UpdateOptionValueInFile(FileOption* option)",
			"void UpdateTooltipPlacement(TooltipState* tooltip, v2 screenSize)",
			"void UpdateTooltipState(VarArray* tooltipRegions, TooltipState* tooltip)",
		],
		"custom_globals":
		[
		],
		"custom_types":
		[
			"AppIcon",
			"AppResources",
			"ClayId",
			"ClayTextUserData",
			"FileOption",
			"FileOptionType",
			"OsDll",
			"ProgramArg",
			"ProgramArgs",
			"SetWindowTopmost_f",
			"TextContraction",
			"TooltipState",
		],
	},
}
